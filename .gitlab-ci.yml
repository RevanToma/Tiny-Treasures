services:
  - name: mongo:6.0
    alias: mongodb


# Define stages
stages:
  - build 
  - deploy

# Define job templates
.template:
  image: node:lts

# install package for web app
app-install:
  stage: build
  extends: .template
  script:
   - cd web-app
   - npm install
  artifacts:
    paths:
      - web-app/node_modules 


# build web app
app-build:
  stage: build
  extends: .template
  script:
    - cd web-app 
    - npm run build
  needs: ["app-install"]
  allow_failure:
    exit_codes:
      - 1
  artifacts:
    paths:
      - web-app/dist


backend-install:
  stage: build
  extends: .template
  script:
   - cd backend
   - npm install
  artifacts:
    paths:
      - backend/node_modules
    expire_in: 1 day

 

backend-compile:
  stage: build
  extends: .template
  before_script:
    - cd backend
  script:
    - npm run build
  needs: ["backend-install"]
  artifacts:
    paths:
      - backend


build-image:
  stage: deploy
  image: docker:23.0.6
  services:
    - docker:23.0.6-dind-alpine3.17
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    # use previous image as a cache to speedup build process
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    # use the commit sha to tag the image
    - >-
      if [[ -z "$CI_COMMIT_TAG" ]]; then
        export VERSION="$CI_COMMIT_SHA"
      else
        export VERSION="$CI_COMMIT_TAG"
      fi

      docker build --cache-from $CI_REGISTRY_IMAGE:latest
      -t $CI_REGISTRY_IMAGE:$VERSION .
      
    - docker tag $CI_REGISTRY_IMAGE:$VERSION $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:$VERSION
    
    
 
